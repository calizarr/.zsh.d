#!/usr/bin/env zsh

### FUNCTIONS ###

case "$OSTYPE" in
    darwin*)
        alias ll='exa -la'
        alias emacs='/Applications/Emacs.app/Contents/MacOS/Emacs'
        # Function to call IntelliJ Idea from command line at directory and passing all possible parameters
        function idea {
            open -a /Applications/IntelliJ\ Idea\ CE.app/Contents/MacOS/idea $@
        }
        # Function clear emacs Darwin
        function osx_clear_emacs () {
            rm /usr/local/bin/emacs*
            rm /usr/local/bin/etags
            rm /usr/local/bin/ebrowse
        }
        # terraform sed for fun and profit
        function format_plan {
            awk '
    /Terraform will perform the following actions:/ { found=1 }
    /------------------------------------------------------------------------/ { found=0 }
    // { if (found) { print $0 } }
  ' |
                (
                    printf '<details>\n<summary>Plan for %s</summary>\n```diff\n' "$1" &&
                        perl -pe 's/\x1b\[[0-9;]*[mG]//g' |
                            sed -e 's/^\(  *\)\([\+-]\)/\2\1/' -e 's/^\(  *\)~/!\1/' &&
                        printf '```\n</details>'
                ) | pbcopy
        }
        ;;
    linux*)
        function format_plan {
   awk '
     /Terraform will perform the following actions:/ { found=1 }
     /------------------------------------------------------------------------/ { found=0 }
     // { if (found) { print $0 } }
   ' |
   (
     printf '<details>\n<summary>Plan for %s</summary>\n\n```diff\n' "$1" &&
     perl -pe 's/\x1b\[[0-9;]*[mG]//g' |
     sed -e 's/^\(  *\)\([\+-]\)/\2\1/' -e 's/^\(  *\)~/!\1/' &&
     printf '```\n</details>'
   ) | xclip -selection clipboard
}
               
esac

# Function to clear all metals and bloop remnants
function clear_metals () {
    if [[ -a "build.sbt" ]]; then
        find . -name "*metals*" | xargs -I {} rm -rf {} \;
        find . -name "*bloop*" | xargs -I {} rm -rf {} \;
    else
        echo "Not at the root of an SBT project"
        return 1
    fi
}


# Get your current kubernetes everything
function kubectl_namespace_cluster () {
    namespace=`kubectl config view --minify --output 'jsonpath={..namespace}'`
    cluster=`kubectl config view --minify --output 'jsonpath={.clusters[0].name}'`
    context=`kubectl config view --minify --output 'jsonpath={.contexts[0].name}'`
    echo "Cluster: $cluster"
    echo "Context: $context"
    echo "Namespace: $namespace"
}


# DGD Function for git page
function ghp () {
    repo="https://"`git config --get remote.origin.url | sed 's|git@||' | sed 's|\.git||' | sed 's|:|/|'`
    case "$OSTYPE" in
        darwin*)
            open "$repo/pulls"
            ;;
        linux*)
            xdg-open "$repo/pulls"
            ;;
    esac
}

function fpathClean() {
    # Cleans fpath of duplicated portions
    NEWPATH=$(echo $1 | sed -e 's/ /\'$'\n/g' | perl -ne 'print unless $seen{$_}++' | paste -s -d' ' -)
    echo $NEWPATH
}

function start_agent {
    echo "Initialising new SSH agent..."
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    echo succeeded
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
    /usr/bin/ssh-add;
}

# AWS Functions
function aws_assume_role() {
    export AWS_PROFILE="$1"
    if [ -z "$2" ]; then
        KOPS_STATE_STORE="$KOPS_STATE_STORE"
    else
        echo "Storing previous KOPS_STATE_STORE: $KOPS_STATE_STORE"
        export PREV_KOPS_STATE_STORE="$KOPS_STATE_STORE"
        KOPS_STATE_STORE="$2"
    fi
    echo "Assuming into role..."
    ROLE_ARN=$(aws configure get role_arn --profile $AWS_PROFILE)
    ROLE_JSON=$(aws sts assume-role --role-arn $ROLE_ARN --role-session-name $(whoami)-$AWS_PROFILE)
    export AWS_ACCESS_KEY_ID="$(echo $ROLE_JSON | jq -r ".Credentials.AccessKeyId")"
    export AWS_SECRET_ACCESS_KEY="$(echo $ROLE_JSON | jq -r ".Credentials.SecretAccessKey")"
    export AWS_SESSION_TOKEN="$(echo $ROLE_JSON | jq -r ".Credentials.SessionToken")"
    export AWS_SDK_LOAD_CONFIG='true'
    export AWS_REGION="us-east-1"
    export KOPS_STATE_STORE="$KOPS_STATE_STORE"
}

function aws_assume_role_long() {
    export AWS_PROFILE="cibo-no-mfa"
    local MFA_CREDENTIALS_FILE="$HOME/.aws/mfa/serial"
    local MFA_SERIAL_NUMBER="$(jq -cr '.MFADevices[0].SerialNumber' $MFA_CREDENTIALS_FILE)"
    local AWS_PROD_ROLE="$1"
    echo "Allowing maximum time of 43200 seconds aka 12 hours"
    local DURATION_SECONDS=43200
    ROLE_ARN=$(aws configure get role_arn --profile $AWS_PROD_ROLE)
    printf "MFA Code: "
    read TOKEN_CODE
    ROLE_JSON=$(aws sts assume-role --role-arn $ROLE_ARN --role-session-name $(whoami)-$AWS_PROD_ROLE --duration-seconds $DURATION_SECONDS --serial-number $MFA_SERIAL_NUMBER --token-code $TOKEN_CODE)
    export AWS_ACCESS_KEY_ID="$(echo $ROLE_JSON | jq -r ".Credentials.AccessKeyId")"
    export AWS_SECRET_ACCESS_KEY="$(echo $ROLE_JSON | jq -r ".Credentials.SecretAccessKey")"
    export AWS_SESSION_TOKEN="$(echo $ROLE_JSON | jq -r ".Credentials.SessionToken")"
    EXPIRATION_DATE=$(echo $ROLE_JSON | jq -r ".Credentials.Expiration")
    echo "Verify expiration date in UTC time is 12 hours from now"
    echo "Expiration date: $EXPIRATION_DATE"
    echo "Current date   : $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
    export AWS_SDK_LOAD_CONFIG="true"
    export AWS_REGION="us-east-1"
}

function aws_check_role() {
    echo "AWS_PROFILE: $AWS_PROFILE"
    echo "AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID"
    echo "AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY"
    echo "AWS_SESSION_TOKEN: $AWS_SESSION_TOKEN"
    echo "AWS_SDK_LOAD_CONFIG: $AWS_SDK_LOAD_CONFIG"
    echo "AWS_REGION: $AWS_REGION"
    echo "KOPS_STATE_STORE: $KOPS_STATE_STORE"
}

function aws_unassume_role_long() {
    unset AWS_PROFILE
    unset AWS_ACCESS_KEY_ID
    unset AWS_SECRET_ACCESS_KEY
    unset AWS_SESSION_TOKEN
    unset AWS_SDK_LOAD_CONFIG
    unset AWS_REGION
}

function aws_unassume_role() {
    if [ -z "$PREV_KOPS_STATE_STORE" ]; then
        echo "It already is the same, don't do anything" >&2
    else
        echo "It exists, return to normal. Original: $PREV_KOPS_STATE_STORE" >&2
        export KOPS_STATE_STORE="$PREV_KOPS_STATE_STORE"
    fi
    unset AWS_PROFILE
    unset AWS_ACCESS_KEY_ID
    unset AWS_SECRET_ACCESS_KEY
    unset AWS_SESSION_TOKEN
    unset AWS_SDK_LOAD_CONFIG
    unset AWS_REGION
}

function aws_assume_sdk_load() {
    AWS_PROFILE="$1"
    if [ -z "$2" ]; then
        export KOPS_STATE_STORE="$KOPS_STATE_STORE"
    else
        echo "Storing previous KOPS_STATE_STORE: $KOPS_STATE_STORE"
        export PREV_KOPS_STATE_STORE="$KOPS_STATE_STORE"
        KOPS_STATE_STORE="$2"
    fi
    export AWS_PROFILE="$AWS_PROFILE"
    export AWS_SDK_LOAD_CONFIG='true'
    export AWS_REGION="us-east-1"
    export KOPS_STATE_STORE="$KOPS_STATE_STORE"
}

function aws_check_sdk() {
    echo "AWS_PROFILE: $AWS_PROFILE"
    echo "AWS_SDK_LOAD_CONFIG: $AWS_SDK_LOAD_CONFIG"
    echo "AWS_REGION: $AWS_REGION"
    echo "KOPS_STATE_STORE: $KOPS_STATE_STORE"
}

function aws_unassume_sdk_load() {
    if [ -z "$PREV_KOPS_STATE_STORE" ]; then
        echo "It already is the same, don't do anything"
    else
        export KOPS_STATE_STORE="$PREV_KOPS_STATE_STORE"
    fi
    unset AWS_PROFILE
    unset AWS_SDK_LOAD_CONFIG
    unset AWS_REGION
}

# Path Manipulation
function pathClean() {
    # Cleans path of duplicated portions.
    NEWPATH=$(echo $1 | sed 's/:/\'$'\n/g' | perl -ne 'print unless $seen{$_}++' | paste -s -d':' -)
    echo "$NEWPATH"
}

function vault_portforward () {
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo "Need a namespace and a service in that order"
        return 1
    else
        namespace="$1"
        service="$2"
    fi

    if [ -z "$4" ]; then
        port="8200"
    else
        port="$4"
    fi

    if [ -z "$3" ]; then
        cmd="kubectl port-forward -n $namespace svc/$service 8200"
        eval "$cmd"
    else
        context="$3"
        cmd="kubectl port-forward --context $context -n $namespace svc/$service 8200"
        eval "$cmd"
    fi
}


function add_key () {
	vault read infra/k8s_admin_ssh_key-$1 -format=json | jq -r .data.private_key | ssh-add -
}

function kubectl_events_sorted () {
    namespace=`kubectl config view --minify --output 'jsonpath={..namespace}'`
    NAMESPACE=${1:-$namespace}
    kubectl --namespace $NAMESPACE get events --sort-by=.metadata.creationTimestamp
}

function argocd_admin_login () {
    kubectl --context aws-admin@k8s.infra.cibo.tech --namespace vault port-forward svc/vault-primary 8200 2>&1 > /dev/null &
    PORT_JOB=$!
    sleep 5
    vault login -no-print -method=github token=${GITHUB_TOKEN}
    ACCOUNT=${1:-dev}
    COLOR=${2:-blue}
    if [ $ACCOUNT != "dev" ]; then
        source /cibo/shared-scripts//local/aws_accounts/aws_cross_account_assume_one_hour.sh "$ACCOUNT"
        sleep 5
    fi
    cd /cibo/platform-definitions/terraform/account-${ACCOUNT}
    password=$(../scripts/show-argocd-admin-password.sh "$COLOR")
    kill $PORT_JOB
    source /cibo/shared-scripts/local/aws_accounts/aws_unassume_cross_account_role.sh 
    echo "$password"
}

function kubectl_delete_namespace () {
    local namespace="$1"
    kubectl get namespace "${namespace}" -o json > /tmp/tmp.json
    cat /tmp/tmp.json | jq 'del(.spec)' > /tmp/tmp.json
    curl -k -H "Content-Type: application/json" -X PUT --data-binary @tmp.json http://127.0.0.1:8001/api/v1/namespaces/${namespace}/finalize
}
